{
  "hash": "f3838dec7e2d6c995596e30c4c7b7358",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: ï£¿ GeoAI\ndate: last-modified\ndate-format: long\n---\n\nThis is a collection of short articles on AI and Geospatial AI (GeoAI) on macOS with an emphasis on using a standard Apple Developer technologies such as Swift/SwiftUI.  We will begin with CoreML, using CreateML, and then delve into converting models developed using PyTorch and TensorFlow to CoreML packages for use with Swift on Apple devices.\n\nWe've already seen GeoAI applications in several areas. Machine Learning has been applied extensively to classify sattelite imagery. Artificial Intelligence applications in Location Intelligence are numerous.  We'll start with object detection of georeferenced features, then by applying spatial statistics, we'll explore predictive models.  Finally, we'll look at various ways to generate maps that are anchored in real world facts (geographic location of features).\n\nApple Silicon with it's neural network engine and strong GPU performance.  Unfortunately, Swift simply doesn't have a lot of traction in the AI / Data Analytics space. Similarly, natively working with geospatial data in Swift has been sorely missing in the Swift.  A simple search on the Swift Package Index reports very few options for reading, writing, geoprocessing, and rendering geospatial data.  With AI, ML, Statistics, and Geographic Information Systems having a long development history on Unix, C/C++ developers fair better by having all of the libraries available to them. There is a strong need in the Swift Community to bring these C/C++ libraries into our ecosystem.  As this is foundational to doing anything with GeoAI, we've started there in the section [Location Intelligence](/geo/1_introduction.qmd).\n\n",
    "supporting": [
      "introduction_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}